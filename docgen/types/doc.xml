<?xml version="1.0" encoding="utf-8" ?>
<root>
  <title>Data.Bool</title>
  <parent>
    <link>Data.Types.html</link>
    <name>DataTypes</name>
  </parent>
  <interfaces>
    <interface>
      <link>./Data.Contract.IBool.html</link>
      <name>IBool</name>
    </interface>
  </interfaces>
  <list>
    <method>_and</method>
    <method>_or</method>
    <method>_xor</method>
    <method>diff</method>
    <method>eq</method>
    <method>greaterOrEq</method>
    <method>greaterThan</method>
    <method>ifTrue</method>
    <method>ifFalse</method>
    <method>lesserOrEq</method>
    <method>lesserThan</method>
    <method>not</method>
    <method>otherwise</method>
    <method>thenElse</method>
  </list>
  <typeclasses>
    <typeclass>Eq</typeclass>
    <typeclass>Ord</typeclass>
    <typeclass>Show</typeclass>
  </typeclasses>
  <description>
    The &lt;code&gt;Data.Bool&lt;/code&gt; class is responsible for the handling of boolean values, that can be PHP-defined constants &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt;.
  </description>
  <namespace>\Data\Bool</namespace>
  <aliases>use \Data\Bool;

$b1 = new Bool (True);
$b2 = Bool (True);
$b3 = new \Data\Bool (True);
$b4 = Boolean (True);
</aliases>
  <methods>
    <method><name>_and</name><signature>_and :: (Bool, Bool) -> Bool</signature>
      <description>Returns true if both the value of the object and of the received
        expression are true. Otherwise false.</description>
<code>$bothTrue = Bool (True)
  -> _and (True); # Object (Data\Bool) { value: bool (true) }
$bothFalse = Bool (False)
  -> _and (False); # Object (Data\Bool) { value: bool (false) }
$bothValues = Bool (True)
  -> _and (False); # Object (Data\Bool) { value: bool (false) }
</code></method>
      <!-- _or method -->
      <method><name>_or</name><signature>_or :: (Bool, Bool) -> Bool</signature>
      <description>Returns true if any of the values, of the object, or of the received
       expression are true. Otherwise false.</description>
<code>$bothTrue = Bool (True)
  -> _or (True); # Object (Data\Bool) { value: bool (true) }
$bothFalse = Bool (False)
  -> _or (False); # Object (Data\Bool) { value: bool (false) }
$bothValues = Bool (True)
  -> _or (False); # Object (Data\Bool) { value: bool (true) }
</code></method>
      <!-- _xor method -->
      <method><name>_xor</name><signature>_xor :: (Bool, Bool) -> Bool</signature>
      <description>Returns true if only one of the values is true, between the value of the
       object and the received expression. Otherwise false.</description>
<code>$bothTrue = Bool (True)
  -> _xor (True); # Object (Data\Bool) { value: bool (false) }
$bothFalse = Bool (False)
  -> _xor (False); # Object (Data\Bool) { value: bool (false) }
$bothValues = Bool (True)
  -> _xor (False); # Object (Data\Bool) { value: bool (true) }
</code></method>
      <!-- diff method -->
      <method><name>diff</name><signature>diff :: (Eq a) => (a, a) -> Bool</signature>
      <description>Different of. Requires all the values to be of the same type and derived
       from Eq typeclass.</description>
<code>$bool1   = Bool (True);
$bool2   = Bool (False);
$compare = $bool1
  -> diff ($bool2); # Object (Data\Bool) { value: bool (true) }

$str  = Str ("foo");
$bool = Bool (True);
$compareTypes = $bool
  -> diff ($str); # Exception: Expecting argument to be instance of Data\Bool. Instead got Data\Str.
</code></method>
      <!-- eq method -->
      <method><name>eq</name><signature>eq :: (Eq a) => (a, a) -> Bool</signature>
      <description>Compares equality. Requires all the values to be of the same type and derived
       from Eq typeclass.</description>
<code>$bool1   = Bool (True);
$bool2   = Bool (False);
$compare = $bool1
  -> eq ($bool2); # Object (Data\Bool) { value: bool (false) }

$str  = Str ("foo");
$bool = Bool (True);
$compareTypes = $bool
  -> eq ($str); # Exception: Expecting argument to be instance of Data\Bool. Instead got Data\Str.
</code></method>
      <!-- greaterOrEq method -->
      <method><name>greaterOrEq</name><signature>greaterOrEq :: (Eq a, Ord a) => (a, a) -> Bool</signature>
      <description>Returns if the value of this object is greater or equal to the value of received value. Must
       be derived from Ord typeclass and, obviously, derived from Eq typeclass.</description>
<code>Int (1) -> greaterOrEq (Int (10)); # Object (Data\Bool) { value: bool (false) }
Str ('Z') -> greaterOrEq (Str ('Z')); # Object (Data\Bool) { value: bool (true) }
</code></method>
      <!-- greaterThan method -->
      <method><name>greaterThan</name><signature>greaterThan :: (Ord a) => (a, a) -> Bool</signature>
      <description>Returns if the value of this object is greater than the received object. Deriving Ord.</description>
<code>Int (1) -> greaterThan (Int (1)); # Object (Data\Bool) { value: bool (false) }
Float (10.0) -> greaterThan (8.34); # Object (Data\Bool) { value: bool (true) }
</code></method>
      <!-- ifTrue method -->
      <method><name>ifTrue</name><signature>ifTrue :: (Bool, Func) </signature>
      <description>The closure passed as parameter is performed if the value of this object is true.</description>
<code>$age = Int (18);                        # Object (Data\Int) { value: int (18) }
$age -> greaterOrEq (18)                # Object (Data\Bool) { value: bool (true) }
     -> ifTrue (function () {
          Str ("You're 18 years old or higher.")
            -> putStrLn ();
        });
</code></method>
      <!-- ifFalse method -->
      <method><name>ifFalse</name><signature>ifFalse :: (Bool, Func) </signature>
      <description>The closure passed as parameter is performed if the value of this object is false.</description>
<code>$age = Int (18);                        # Object (Data\Int) { value: int (18) }
$age -> greaterOrEq (18)                # Object (Data\Bool) { value: bool (true) }
     -> ifTrue (function () {
          Str ("You're 18 years old or higher.")
            -> putStrLn ();
        });
     -> ifFalse (function () {
          Str ("Sorry, but you're so young.")
            -> putStrLn ();
        });
</code></method>
      <!-- lesserOrEq method -->
      <method><name>lesserOrEq</name><signature>lesserOrEq :: (Eq a, Ord a) => (a, a) -> Bool</signature>
      <description>Returns if the value of this object is lesser or equal to the value of the received object. Deriving Ord, Eq.</description>
<code>Int (1) -> lesserOrEq (Int (10)); # Object (Data\Bool) { value: bool (true) }
Str ('Z') -> lesserOrEq (Str ('Z')); # Object (Data\Bool) { value: bool (true) }
</code></method>
      <!-- lesserThan method -->
      <method><name>greaterThan</name><signature>greaterThan :: (Ord a) => (a, a) -> Bool</signature>
      <description>Returns if the value of this object is lesser than the value of the received object. Deriving Ord.</description>
<code>Int (1) -> lesserThan (Int (1)); # Object (Data\Bool) { value: bool (false) }
Float (10.0) -> lesserThan (8.34); # Object (Data\Bool) { value: bool (false) }
</code></method>
      <!-- not method -->
      <method><name>not</name><signature>not :: Bool -> Bool</signature>
      <description>Negates the value of the object.</description>
<code>Bool (True) -> not (); # Object (Data\Bool) { value: bool (false) }
Bool (False) -> not (); # Object (Data\Bool) { value: bool (true) }
</code></method>
      <!-- otherwise method -->
      <method><name>otherwise</name><signature>otherwise :: (Bool, Func) -> Bool</signature>
      <description>Alias to <a href="#ifFalse-method">ifFalse method</a>.</description>
<code>$age = Int (18);                        # Object (Data\Int) { value: int (18) }
$age -> greaterOrEq (18)                # Object (Data\Bool) { value: bool (true) }
     -> ifTrue (function () {
          Str ("You're 18 years old or higher.")
            -> putStrLn ();
        });
     -> otherwise (function () {
          Str ("Sorry, but you're so young.")
            -> putStrLn ();
        });
</code></method>
      <!-- thenElse method -->
      <method><name>thenElse</name><signature>thenElse :: (Bool, Func, Func) -> Bool</signature>
      <description>The same as &lt;code&gt;-> ifTrue () -> iFalse ()&lt;/code&gt;</description>
<code>$age = Int (18)
  -> greaterOrEq (18)
  -> thenElse (
    function (/* then */) {
      Str ("You're 18 years old or higher.")
        -> putStrLn ();
    },
    function (/* else */) {
      Str ("Sorry, but you're so young.")
        -> putStrLn ();
    }
  );
</code></method>
  </methods>
</root>
